package PatternProgramming;
import java.io.CharConversionException;

public class Pattern18 {

	public static void main(String[] args) {
	 /*
		            *
			   * *
			  *   *
			 *     *
			*       *
			 *     *
			  *   *
			   * *
			    *

		n = 5
		
	 */
		
		int n = 5;
		int print_odd_times_top = 1;
		
		int total_width = 2*n-1;
		
		//Since the central space takes total_width-2(-2 because of 2 stars) 
		//For next row, subtract two more since , two more stars take their place after the longest lines so -4;
		int no_of_spaces_after_central_space = total_width - 4;
		
		for(int i=1; i<=n; i++)
		{
			for(int s=1; s<=n-i; s++)
			{
				System.out.print(" ");
			}
			
			System.out.print("*");
			
			if(i!=1)
			{	
				//Since the pattern of space in between is the order of 0,1,,3,5,7
				//Excluding first row print the space in this format.
				//The range is determined by print_odd_times_top variable.
				for(int s=1; s<=print_odd_times_top; s++) {
					System.out.print(" ");
				}
				
				print_odd_times_top+=2;
				
				//Since the first star is already generated by above star print statement, 
				//Print * from 2nd row onwards.
				System.out.print("*");
			}

			System.out.println();
		}
		
		
		//bottom-half
		//Row from 6 to 9
		int print_odd_times_bottom = no_of_spaces_after_central_space;
		//Since the space between the boundaries is decreasing in odd times.
		//i.e in the order of 5,3,1 , 0 for last since star already present.
		for(int i=n-1; i>=1; i--)
		{
			for(int s=1; s<=n-i; s++)
			{				
				System.out.print(" ");
			}

			System.out.print("*");
			
			if(i>1) {
			for(int s=1; s<=print_odd_times_bottom; s++) {
				System.out.print(" ");
			}
			print_odd_times_bottom-=2;
			}
			
			//Print star except for last row i.e 4th iteration in this loop.
			if(i>1)
				System.out.print("*");
			
			System.out.println();
				
			
		}
		
	
	}

}
